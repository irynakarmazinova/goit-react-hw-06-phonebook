{"version":3,"sources":["components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/Title/title.module.scss","components/Title/Title.jsx","redux/contacts/contacts-actions.js","redux/filter/filter-selectors.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","redux/filter/filter-actions.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","Title","title","className","s","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","getFilterValue","state","contacts","filter","getContacts","items","getvisibleContacts","toLowerCase","includes","console","log","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleInputChange","currentTarget","value","reset","onSubmit","e","preventDefault","alert","some","contact","form","autoComplete","label","autoFocus","type","onChange","input","pattern","required","btn","changeFilter","Filter","filterValue","target","ContactList","visibleContacts","list","map","item","box","onClick","onDeleteContact","App","createReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.2f6683f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2BTeR\",\"item\":\"ContactList_item__3Zjr5\",\"box\":\"ContactList_box__1s3Lo\",\"name\":\"ContactList_name__2IKtW\",\"number\":\"ContactList_number__134Bt\",\"btn\":\"ContactList_btn__2_FiF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__jPUhS\",\"input\":\"Filter_input__3wiwh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"title_title__sTQ02\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './title.module.scss';\n\nconst Title = ({ title }) => <h2 className={s.title}>{title}</h2>;\nexport default Title;\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  // const addContact = createAction(types.ADD, second argument - function Prepare callback)\r\n\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n// console.log(addContact('ir', 18));\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n// console.log(deleteContact(5));\r\n\r\n// -----------------------------------\r\n// deleteContact возвращает функцию createAction\r\n// когда вызываешь deleteContact() она возарашает объект типа types.DELETE и пэйлоад 5. аргумент который передаешь в вызов этого экшнкриэйтера автоматич ставится на пэйлоад\r\n","export const getFilterValue = state => state.contacts.filter;\r\n","import { getFilterValue } from 'redux/filter/filter-selectors';\r\n\r\nexport const getContacts = state => state.contacts.items; //простые селекторы\r\n\r\nexport const getvisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilterValue(state);\r\n\r\n  return contacts.filter(\r\n    ({ name, number }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase()) ||\r\n      number.includes(filter),\r\n  );\r\n};\r\n// сложные или составные/композитные селекторы\r\nconsole.log();\r\n\r\n// ---------------------------------\r\n// селекторы это функции которые знают о том, как выглядит состояние, о внешнем виде\r\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/contacts-actions';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\n\nimport s from './ContactForm.module.scss';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  // для всех инпутов ввод данных\n  const handleInputChange = ({ currentTarget: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleBtnSubmit = e => {\n    e.preventDefault();\n\n    if (name === '' && number === '') {\n      return alert('Empty');\n    }\n\n    contacts.some(\n      // contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number,\n    )\n      ? alert(`${name} is already in contacts.`)\n      : dispatch(addContact({ name, number }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <form onSubmit={handleBtnSubmit} className={s.form} autoComplete=\"off\">\n      <label className={s.label}>\n        Name\n        <input\n          autoFocus\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          className={s.input}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          className={s.number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={s.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) => dispatch(addContact(name, number)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm); //коррирование\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { changeFilter } from 'redux/filter/filter-actions';\nimport { getFilterValue } from 'redux/filter/filter-selectors';\n\nimport s from './Filter.module.scss';\n\nconst Filter = () => {\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const onChange = ({ target: { value } }) => dispatch(changeFilter(value));\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={onChange}\n        className={s.input}\n      ></input>\n    </label>\n  );\n};\nexport default Filter;\n\n// const mapStateToProps = ({ contacts: { filter } }) => ({\n//   value: filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: ({ target: { value } }) => dispatch(changeFilter(value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { deleteContact } from 'redux/contacts/contacts-actions';\nimport { getvisibleContacts } from 'redux/contacts/contacts-selectors';\n\nimport s from './ContactList.module.scss';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(getvisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={s.list}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <div className={s.box}>\n            <p className={s.name}>{name}: </p>\n            <p className={s.number}>{number}</p>\n            <button className={s.btn} onClick={() => onDeleteContact(id)}>\n              {/* <button className={s.btn} onClick={onDeleteContact}> id={id} */}\n              Delete\n            </button>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default ContactList;\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(deleteContact(id)),\n//   visibleContacts: (items, filter) => {\n//     dispatch(getVisibleContacts(items, filter));\n//   },\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","// import { useState, useEffect } from 'react';\n// import { connect } from 'react-redux';\n\n// import * as actions from './redux/actions';\n\nimport Title from './components/Title/Title';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\n// import filterContacts from './utils/filter-contact';\nimport ContactList from './components/ContactList/ContactList';\n\nimport './App.scss';\n\n// import classNames from 'classnames';\n// удобно для составления динамических классов в компоненте\n// classNames(бaзовые классы -'a', 'b', {\n// динамические добавить класс, те что зависят от уловия 'c': true / false})\n\nexport default function App() {\n  // const [contacts, setContacts] = useState(() =>\n  //   // const [contacts, setContacts] = useState(\n  //   JSON.parse(window.localStorage.getItem('contacts') ?? []),\n  // );\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   // if (contacts === '') {\n  //   //   // if (!contacts) {\n  //   //   return;\n  //   // }\n\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const addContact = (name, number) => {\n  //   const contact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   contacts.some(\n  //     // contacts.find(\n  //     contact =>\n  //       contact.name.toLowerCase() === name.toLowerCase() ||\n  //       contact.number === number,\n  //   )\n  //     ? alert(`${name} is already in contacts.`)\n  //     : setContacts(prevState => [...prevState, contact]);\n  // };\n\n  // const handleDeleteContact = id => {\n  //   // const handleDeleteContact = ({ target: { id } }) => {\n  //   setContacts(contacts.filter(contact => contact.id !== id));\n  //   // setContacts(prevState => prevState.filter(contact => contact.id !== id));\n  // };\n\n  // const handleChangeFilter = ({ currentTarget: { value } }) => {\n  //   setFilter(value);\n  // };\n\n  // делает видимым тот контакт, который соответствует тексту поиска в инпуте\n  // const visibleContacts = () =>\n  //   contacts.filter(\n  //     contact =>\n  //       contact.name.toLowerCase().includes(filter.trim().toLowerCase()) ||\n  //       contact.number.includes(filter.trim()),\n  //   );\n\n  return (\n    // <div className=\"container\">\n    //   <h1 className=\"visually_hidden\">Phonebook</h1>\n\n    //   <Title title=\"Phonebook\" />\n    //   <ContactForm onSubmit={addContact} />\n\n    //   <Title title=\"Contacts\" />\n    //   <Filter value={filter} onChange={handleChangeFilter} />\n    //   <ContactList\n    //     visibleContacts={visibleContacts()}\n    //     onDeleteContact={handleDeleteContact}\n    //   />\n    // </div>\n    <div className=\"container\">\n      <h1 className=\"visually_hidden\">Phonebook</h1>\n\n      <Title title=\"Phonebook\" />\n      <ContactForm />\n\n      <Title title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n// ---------------------------------------------------\n// redux toolkit\n// react query\n// SWR\n\n// вызывается-диспачится. диспач вызывает экшены\n\n// добавить лэйзи и статс\n// что с локалстор\n// нужно ли раздеить сонтактс и фильтр\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport { addContact, deleteContact } from './contacts-actions';\r\n// import { addContactFn } from '../../utils/add-contact';\r\n\r\nconst items = createReducer([], {\r\n  // [addContact]: (state, { payload }) => addContactFn(state, payload),\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nexport default combineReducers({ items });\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  // combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\nimport contactReducer from './contacts/contacts-reducer';\r\n\r\n// console.log(process.env.NODE_ENV);\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactReducer),\r\n// });\r\n\r\nexport const store = configureStore({\r\n  reducer: { contacts: persistReducer(contactsPersistConfig, contactReducer) },\r\n  // reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store); //обертка над сторам котор будет реализ обновл и запись локалстораджа\r\n// ------------------------------------------\r\n// персисты заменяют локалстораж\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport { store, persistor } from 'redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__31A4V\",\"label\":\"ContactForm_label__cK-2M\",\"input\":\"ContactForm_input__FkMHJ\",\"number\":\"ContactForm_number__Gcax8\",\"btn\":\"ContactForm_btn__3qkWZ\"};"],"sourceRoot":""}