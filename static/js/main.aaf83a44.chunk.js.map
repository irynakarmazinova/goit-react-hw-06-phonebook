{"version":3,"sources":["components/Filter/Filter.module.scss","components/Title/title.module.scss","components/Title/Title.jsx","redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss"],"names":["module","exports","Title","title","className","s","name","number","type","types","payload","id","uuidv4","value","connect","dispatch","onSubmit","contactsActions","useState","setName","setNumber","handleInputChange","currentTarget","reset","e","preventDefault","form","autoComplete","label","autoFocus","onChange","input","pattern","required","btn","contacts","filter","target","contactActions","onDeleteContact","visibleContacts","items","allContacts","toLowerCase","includes","trim","getVisibleContacts","list","map","item","box","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaf83a44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__jPUhS\",\"input\":\"Filter_input__3wiwh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"title_title__sTQ02\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './title.module.scss';\n\nconst Title = ({ title }) => <h2 className={s.title}>{title}</h2>;\nexport default Title;\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","export default {\r\n  ADD: 'contacts/add',\r\n  DELETE: 'contacts/delete',\r\n  CHANGE_FILTER: 'contacts/changeFilter',\r\n};\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport types from './contacts-types';\r\n\r\nconst addContact = (name, number) => ({\r\n  type: types.ADD,\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n});\r\n\r\nconst deleteContact = id => ({\r\n  type: types.DELETE,\r\n  payload: id,\r\n});\r\n\r\nconst changeFilter = value => ({\r\n  type: types.CHANGE_FILTER,\r\n  payload: value,\r\n});\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\n\nimport contactsActions from 'redux/contacts/contacts-actions';\n\nimport s from './ContactForm.module.scss';\n\nfunction ContactForm({ onSubmit }) {\n  // в форме стейт нужен только при сабмите, поэтому храним в компоненте формы, а при сабмите отдаем на верх\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // для всех инпутов ввод данных\n  const handleInputChange = ({ currentTarget: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleBtnSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(name, number);\n\n    reset();\n    // e.target.reset(); //получить ссылку на форму и очистить методом от реакта\n  };\n\n  const reset = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <form onSubmit={handleBtnSubmit} className={s.form} autoComplete=\"off\">\n      <label className={s.label}>\n        Name\n        <input\n          autoFocus\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          className={s.input}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          className={s.number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={s.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsActions.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm); //коррирование\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\n\nimport contactActions from 'redux/contacts/contacts-actions';\n\nimport s from './Filter.module.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n      className={s.input}\n    ></input>\n  </label>\n);\n\nconst mapStateToProps = ({ contacts: { filter } }) => ({\n  value: filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: ({ target: { value } }) =>\n    dispatch(contactActions.changeFilter(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\n\nimport contactActions from 'redux/contacts/contacts-actions';\n\nimport s from './ContactList.module.scss';\n\nconst ContactList = ({ onDeleteContact, visibleContacts }) => (\n  <ul className={s.list}>\n    {visibleContacts().map(({ id, name, number }) => (\n      // {visibleContacts.map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        <div className={s.box}>\n          <p className={s.name}>{name}: </p>\n          <p className={s.number}>{number}</p>\n          <button className={s.btn} onClick={() => onDeleteContact(id)}>\n            {/* <button className={s.btn} onClick={onDeleteContact} id={id}> */}\n            Delete\n          </button>\n        </div>\n      </li>\n    ))}\n  </ul>\n);\n\nconst getVisibleContacts = (allContacts, filter) =>\n  allContacts.filter(\n    ({ name, number }) =>\n      name.toLowerCase().includes(filter.trim().toLowerCase()) ||\n      number.includes(filter.trim()),\n  );\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactActions.deleteContact(id)),\n  visibleContacts: (items, filter) => {\n    dispatch(getVisibleContacts(items, filter));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(ContactList);\n\n// ContactList.propTypes = {\n//   onDeleteContact: PropTypes.func.isRequired,\n//   visibleContacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ).isRequired,\n// };\n","import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n// import * as actions from './redux/actions';\n\nimport Title from './components/Title/Title';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\n// import filterContacts from './utils/filter-contact';\nimport ContactList from './components/ContactList/ContactList';\n\nimport './App.scss';\n\n// import classNames from 'classnames';\n// удобно для составления динамических классов в компоненте\n// classNames(бaзовые классы -'a', 'b', {\n// динамические добавить класс, те что зависят от уловия 'c': true / false})\n\nexport default function App() {\n  // const [contacts, setContacts] = useState(() =>\n  //   // const [contacts, setContacts] = useState(\n  //   JSON.parse(window.localStorage.getItem('contacts') ?? []),\n  // );\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   // if (contacts === '') {\n  //   //   // if (!contacts) {\n  //   //   return;\n  //   // }\n\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const addContact = (name, number) => {\n  //   const contact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   contacts.some(\n  //     // contacts.find(\n  //     contact =>\n  //       contact.name.toLowerCase() === name.toLowerCase() ||\n  //       contact.number === number,\n  //   )\n  //     ? alert(`${name} is already in contacts.`)\n  //     : setContacts(prevState => [...prevState, contact]);\n  // };\n\n  // const handleDeleteContact = id => {\n  //   // const handleDeleteContact = ({ target: { id } }) => {\n  //   setContacts(contacts.filter(contact => contact.id !== id));\n  //   // setContacts(prevState => prevState.filter(contact => contact.id !== id));\n  // };\n\n  // const handleChangeFilter = ({ currentTarget: { value } }) => {\n  //   setFilter(value);\n  // };\n\n  // делает видимым тот контакт, который соответствует тексту поиска в инпуте\n  // const visibleContacts = () =>\n  //   contacts.filter(\n  //     contact =>\n  //       contact.name.toLowerCase().includes(filter.trim().toLowerCase()) ||\n  //       contact.number.includes(filter.trim()),\n  //   );\n\n  return (\n    // <div className=\"container\">\n    //   <h1 className=\"visually_hidden\">Phonebook</h1>\n\n    //   <Title title=\"Phonebook\" />\n    //   <ContactForm onSubmit={addContact} />\n\n    //   <Title title=\"Contacts\" />\n    //   <Filter value={filter} onChange={handleChangeFilter} />\n    //   <ContactList\n    //     visibleContacts={visibleContacts()}\n    //     onDeleteContact={handleDeleteContact}\n    //   />\n    // </div>\n    <div className=\"container\">\n      <h1 className=\"visually_hidden\">Phonebook</h1>\n\n      <Title title=\"Phonebook\" />\n      <ContactForm />\n\n      <Title title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n// ---------------------------------------------------\n// redux toolkit\n// react query\n// SWR\n\n// добавить лэйзи и статс\n// что с локалстор\n// нужно ли раздеить сонтактс и фильтр\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n// import store from 'redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider>\n        {/* <Provider store={store}> */}\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__31A4V\",\"label\":\"ContactForm_label__cK-2M\",\"input\":\"ContactForm_input__FkMHJ\",\"number\":\"ContactForm_number__Gcax8\",\"btn\":\"ContactForm_btn__3qkWZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2BTeR\",\"item\":\"ContactList_item__3Zjr5\",\"box\":\"ContactList_box__1s3Lo\",\"name\":\"ContactList_name__2IKtW\",\"number\":\"ContactList_number__134Bt\",\"btn\":\"ContactList_btn__2_FiF\"};"],"sourceRoot":""}